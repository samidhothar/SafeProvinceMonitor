# üìå Project: ‚ÄúSaaf | Sasta | Safe‚Äù Provincial Reform Monitoring Portal  
# üõ†  Tech Stack: Django 4 + Django REST Framework, PostgreSQL (use SQLite for the dummy build), Tailwind-CSS (optional).  
# üë§ User Roles: Admin, Department Head, District Officer, Public.  
# --------------------------------------------------------------
# 1‚É£  Core Requirements
# --------------------------------------------------------------
# ‚Ä¢ Build a Django project called reform_portal with two apps:
#     ‚îî‚îÄ‚îÄ dashboard  ‚Äì REST + HTML views for KPIs, timelines, maps  
#     ‚îî‚îÄ‚îÄ accounts   ‚Äì simple username/password auth + role flags  
# ‚Ä¢ Provide *dummy data* loaders (manage.py command or fixtures) that pre-populate:
#     ‚Äì 6 sectors  ‚Üí  water, health, schools, electricity, transport, security  
#     ‚Äì 30 projects as per table below, each with:  
#           id, name, sector, district, start_date, end_date_plan, 
#           status (ON_TRACK, AT_RISK, DELAYED, COMPLETE), 
#           budget_allocated, budget_spent,
#           kpi_target, kpi_achieved (numeric), 
#           last_update, latitude, longitude
#     ‚Äì 10 districts (strings), 5 contractors, 50 citizen feedback records
# --------------------------------------------------------------
# 2‚É£  Domain Schema (models.py)
# --------------------------------------------------------------
#  class Sector        (name, icon)  
#  class District      (name, lat, lng)  
#  class Project       (sector FK, district FK, ‚Ä¶fields above‚Ä¶)  
#  class Contractor    (name, rating)  
#  class Procurement   (project FK, tender_id, amount, award_date, boqs_url)  
#  class KPIHistory    (project FK, date, kpi_achieved)  
#  class Feedback      (project FK, citizen_name, rating, comment, timestamp)  
#  class UserProfile   (user FK, role_enum)               # Admin/Dept/District/Public
# --------------------------------------------------------------
# 3‚É£  REST API End-points (urls.py / views.py)
# --------------------------------------------------------------
#  ‚Ä¢ /api/projects/               CRUD + list filters (sector, district, status)  
#  ‚Ä¢ /api/projects/<id>/kpi/      GET timeline of KPIHistory  
#  ‚Ä¢ /api/finance/summary/        Total allocated vs spent per sector & district  
#  ‚Ä¢ /api/feedback/               POST citizen feedback (public, no auth)  
#  ‚Ä¢ /api/auth/login/             JWT or Session based  
# --------------------------------------------------------------
# 4‚É£  Front-End Pages (simple Django templates will do)
# --------------------------------------------------------------
#  a) Home Dashboard  
#       ‚Äì Cards: total projects, % complete, % delayed  
#       ‚Äì Mini-KPIs per sector  
#  b) Interactive Map  
#       ‚Äì Leaflet or Google Maps; markers colour-coded by status  
#       ‚Äì Popup shows project name, progress bar, budget vs spent  
#  c) Project Detail  
#       ‚Äì Timeline (Gantt style divs), KPIHistory chart (Chart.js)  
#  d) Procurement & Contracts Page  
#       ‚Äì Table of tenders, cost overruns flagged red  
#  e) Feedback Page (+ form)  
# --------------------------------------------------------------
# 5‚É£  Dummy Data Table (seed content)
# --------------------------------------------------------------
#  | id | Sector      | Project                                | Start | Plan End | Budget (PKR bn) | Quick Description |
#  |----|-------------|----------------------------------------|-------|----------|-----------------|-------------------|
#  | 1  | water       | Canal lining ‚Äì Lahore, Faisalabad       | 2025-01-15 | 2027-03-30 | 15 | 25 % water loss cut‚Ä¶ |
#  | 2  | health      | Sehat Card THQ Expansion ‚Äì Multan       | 2025-03-01 | 2026-03-01 | 10 | Free maternity care‚Ä¶ |
#  | 3  | schools     | Digitize 500 schools ‚Äì Rawalpindi       | 2025-06-01 | 2027-06-01 | 8  | Tablets + smart boards‚Ä¶ |
#  | ‚Ä¶  | ‚Ä¶           | ‚Ä¶ (fill out remaining 27 rows)          | ‚Ä¶     | ‚Ä¶        | ‚Ä¶               | ‚Ä¶                 |
# --------------------------------------------------------------
# 6‚É£  Monitoring Features to Implement
# --------------------------------------------------------------
#  ‚úÖ Real-time status badges  (green/yellow/red)  
#  ‚úÖ Budget burn-down bar + % spent  
#  ‚úÖ KPI progress pie or bar  
#  ‚úÖ District and sector filters  
#  ‚úÖ CSV/PDF export of project list  
#  ‚úÖ Role-based access (public sees read-only summaries)  
#  ‚úÖ Automated ‚Äúpredict delay‚Äù flag when kpi_achieved < 60 % and >50 % duration elapsed
# --------------------------------------------------------------
# 7‚É£  Nice-to-Have (stretch goals)
# --------------------------------------------------------------
#  ‚Ä¢ WebSockets channel for live updates (Django Channels)  
#  ‚Ä¢ Simple mobile-responsive Tailwind layout  
#  ‚Ä¢ Management command to randomly update KPIHistory every hour for demo
# --------------------------------------------------------------
# Deliverables
# --------------------------------------------------------------
#  1. Full Django project zip or repo link  
#  2. README with setup (python-3.11 -m venv, pip install -r requirements.txt, python manage.py migrate, python manage.py loaddata dummy.json, runserver)  
#  3. Postman collection or Swagger docs auto-generated
# --------------------------------------------------------------
# NOTE
# --------------------------------------------------------------
#  ‚Ä¢ Use only open-source libraries  
#  ‚Ä¢ Keep code clean, commented, PEP-8 compliant  
#  ‚Ä¢ Provide at least 5 unit tests per app  
#  ‚Ä¢ Assume deployment on Ubuntu 22.04 + gunicorn + nginx
# --------------------------------------------------------------
